<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home | xuxife</title>
    <link>https://xuxife.github.io/</link>
    <description>Recent content on Home | xuxife</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sat, 01 Dec 2018 16:29:08 +0800</lastBuildDate>
    
	<atom:link href="https://xuxife.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Report of Heat Parallel Simulation</title>
      <link>https://xuxife.github.io/posts/heat-simulation-report/</link>
      <pubDate>Sat, 01 Dec 2018 16:29:08 +0800</pubDate>
      
      <guid>https://xuxife.github.io/posts/heat-simulation-report/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } }); MathJax.Hub.Queue(function() { // Fix  tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i  Author: Xingfei Xu (116010252) Email: 116010252@link.cuhk.edu.cn Online Version: https://xuxife.github.io/posts/heat-simulation-report Source Code: https://github.com/xuxife/heat-simulation  Usage  Call ./heat-simulation to check the usage manual.  Usage: ./heat-simulation [-args] seq|pth|mpi -down whether down wall is on fire -f float the default temperature of fire (default 100) -h int the height of window (default 400) -left whether left wall is on fire -n int the number of threads (only for pthread) (default 2) -r float the default temperature in the room (default 20) -right whether right wall is on fire -up whether up wall is on fire -w int the width of window (default 400)   For instance, ./heat-simulation -w 200 -h 200 -up -n 2 pth will use two threads and create a 200x200 window with burning up wall.  Following output would be printed when the program begins running:</description>
    </item>
    
    <item>
      <title>Report of Parallel N-Body Simulation</title>
      <link>https://xuxife.github.io/posts/nbody-report/</link>
      <pubDate>Thu, 22 Nov 2018 12:01:00 +0800</pubDate>
      
      <guid>https://xuxife.github.io/posts/nbody-report/</guid>
      <description>MathJax.Hub.Config({ tex2jax: { inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]], displayMath: [[&#39;$$&#39;,&#39;$$&#39;]], processEscapes: true, processEnvironments: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;], TeX: { equationNumbers: { autoNumber: &#34;AMS&#34; }, extensions: [&#34;AMSmath.js&#34;, &#34;AMSsymbols.js&#34;] } } }); MathJax.Hub.Queue(function() { // Fix  tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i  Author: Xu Xingfei (116010252) Email: 116010252@link.cuhk.edu.cn Online version: https://xuxife.github.io/posts/nbody-report Source code: https://github.com/xuxife/nbody  How to Use  Call ./nbody check the help manual  Usage: ./nbody [-args] ppseq|pppth|ppmpi -color the bodies have color or not -h int height, the window height (default 500) -m float mass, the supreme mass of bodies (kg) (default 1e+10) -mr float the ratio of distance that two bodies would merge if they are too close, 0 for not merge (default 0.2) -n int (n)-body, the number bodies to simulate (default 100) -r float radius, the supreme radius of bodies (m), we can infer that all bodies have same density (default 5) -s int the random seed (default 1) -sw float simulation width distance (default 500) -t int the number of threads to call (only for pthread) (default 2) -w int width, the window width (default 500)  For instance, run a 100x100 window to simulate 100 bodies (with color and maximum radius 3, not merge) in 500 meter width scope, the method is 4 threads pthread, then the command is .</description>
    </item>
    
  </channel>
</rss>